name: Backend Build and Deployment to GCP

on:
  push:
    branches:
      - main  # Trigger on push to main branch

env:
  # Defaults are set here but can be overridden with GitHub secrets if needed
  DB_PORT: "27017"
  VM_ZONE: "europe-west4-a"
  VM_TYPE: "e2"
  VM_CPU: "medium"
  VM_MEMORY: "4"
  FIREWALL_RULE: "allow-mongo"
  REPOSITORY_ZONE: "europe-west4"
  CLOUD_RUN_SERVICE_ZONE: "europe-west4"

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.3.0
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker for GCP Artifact Registry
      run: gcloud auth configure-docker ${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/backend:${{ github.sha }} ./backend
        docker push ${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/backend:${{ github.sha }}

    - name: Deploy MongoDB VM if not exists
      run: |
        if ! gcloud compute instances describe ${{ secrets.DB_HOSTNAME }} --zone ${{ env.VM_ZONE }} 2>/dev/null; then
          echo "Creating MongoDB VM instance"
          gcloud compute instances create-with-container ${{ secrets.DB_HOSTNAME }} \
            --container-image=mongo:latest \
            --tags=server-db \
            --container-env=MONGO_INITDB_ROOT_USERNAME=${{ secrets.DB_USER }},MONGO_INITDB_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --zone ${{ env.VM_ZONE }} \
            --custom-cpu ${{ env.VM_CPU }} \
            --custom-memory ${{ env.VM_MEMORY }}G \
            --custom-vm-type ${{ env.VM_TYPE }}
        else
          echo "DB '${{ secrets.DB_HOSTNAME }}' already exists."
        fi

    - name: Ensure firewall rule exists
      run: |
        if ! gcloud compute firewall-rules describe ${{ env.FIREWALL_RULE }} 2>/dev/null; then
          echo "Creating firewall rule to allow MongoDB connections"
          gcloud compute firewall-rules create ${{ env.FIREWALL_RULE }} \
            --allow tcp:${{ env.DB_PORT }} \
            --target-tags server-db
        else
          echo "Firewall rule '${{ env.FIREWALL_RULE }}' already exists."
        fi

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
          --image=${{ secrets.REPOSITORY_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPOSITORY_NAME }}/backend:${{ github.sha }} \
          --platform=managed \
          --region=${{ env.CLOUD_RUN_SERVICE_ZONE }} \
          --allow-unauthenticated \
          --set-env-vars=MONGO_URI="mongodb://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOSTNAME }}:${{ env.DB_PORT }}",JWT_SECRET=${{ secrets.JWT_SECRET }}
